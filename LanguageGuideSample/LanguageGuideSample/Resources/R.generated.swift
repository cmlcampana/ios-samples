//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Podfile`.
    static let podfile = Rswift.FileResource(bundle: R.hostingBundle, name: "Podfile", pathExtension: "")

    /// `bundle.url(forResource: "Podfile", withExtension: "")`
    static func podfile(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podfile
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `typeAliases_image1`.
    static let typeAliases_image1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "typeAliases_image1")
    /// Image `typeAliases_image2`.
    static let typeAliases_image2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "typeAliases_image2")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "typeAliases_image1", bundle: ..., traitCollection: ...)`
    static func typeAliases_image1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typeAliases_image1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "typeAliases_image2", bundle: ..., traitCollection: ...)`
    static func typeAliases_image2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typeAliases_image2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// Value: Add in a array
      static let arraysItemButtonAddItem = Rswift.StringResource(key: "Arrays.item.button.addItem", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: An array stores values of the same type in an ordered list. The same value can appear in an array multiple times at different positions.
      static let structuresCollectionTypesArrayDescription = Rswift.StringResource(key: "Structures.collectionTypes.array.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Arrays - Sample
      static let arraysItemTitle = Rswift.StringResource(key: "Arrays.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Clear array
      static let arraysItemButtonClearArray = Rswift.StringResource(key: "Arrays.item.button.clearArray", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Close
      static let generalClose = Rswift.StringResource(key: "General.close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Collection Types - Arrays
      static let structuresCollectionTypesArrayTitle = Rswift.StringResource(key: "Structures.collectionTypes.array.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Once you define a type alias, you can use the alias anywhere you might use the original name:
      static let typeAliasesItemDescription = Rswift.StringResource(key: "TypeAliases.item.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tuples
      static let basicsTuplesTitle = Rswift.StringResource(key: "Basics.tuples.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tuples group multiple values into a single compound value. The values within a tuple can be of any type and donâ€™t have to be of the same type as each other
      static let basicsTuplesDescription = Rswift.StringResource(key: "Basics.tuples.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type Aliases
      static let basicsTypeAliasesTitle = Rswift.StringResource(key: "Basics.typeAliases.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type a number: 
      static let arraysItemSampleType = Rswift.StringResource(key: "Arrays.item.sample.type", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type aliases define an alternative name for an existing type. You define type aliases with the typealias keyword
      static let basicsTypeAliasesDescription = Rswift.StringResource(key: "Basics.typeAliases.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Type aliases define an alternative name for an existing type. You define type aliases with the typealias keyword.
      static let typeAliasesItemTitle = Rswift.StringResource(key: "TypeAliases.item.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Add in a array
      static func arraysItemButtonAddItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arrays.item.button.addItem", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arrays.item.button.addItem"
        }

        return NSLocalizedString("Arrays.item.button.addItem", bundle: bundle, comment: "")
      }

      /// Value: An array stores values of the same type in an ordered list. The same value can appear in an array multiple times at different positions.
      static func structuresCollectionTypesArrayDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Structures.collectionTypes.array.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Structures.collectionTypes.array.description"
        }

        return NSLocalizedString("Structures.collectionTypes.array.description", bundle: bundle, comment: "")
      }

      /// Value: Arrays - Sample
      static func arraysItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arrays.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arrays.item.title"
        }

        return NSLocalizedString("Arrays.item.title", bundle: bundle, comment: "")
      }

      /// Value: Clear array
      static func arraysItemButtonClearArray(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arrays.item.button.clearArray", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arrays.item.button.clearArray"
        }

        return NSLocalizedString("Arrays.item.button.clearArray", bundle: bundle, comment: "")
      }

      /// Value: Close
      static func generalClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General.close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "General.close"
        }

        return NSLocalizedString("General.close", bundle: bundle, comment: "")
      }

      /// Value: Collection Types - Arrays
      static func structuresCollectionTypesArrayTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Structures.collectionTypes.array.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Structures.collectionTypes.array.title"
        }

        return NSLocalizedString("Structures.collectionTypes.array.title", bundle: bundle, comment: "")
      }

      /// Value: Once you define a type alias, you can use the alias anywhere you might use the original name:
      static func typeAliasesItemDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TypeAliases.item.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TypeAliases.item.description"
        }

        return NSLocalizedString("TypeAliases.item.description", bundle: bundle, comment: "")
      }

      /// Value: Tuples
      static func basicsTuplesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Basics.tuples.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Basics.tuples.title"
        }

        return NSLocalizedString("Basics.tuples.title", bundle: bundle, comment: "")
      }

      /// Value: Tuples group multiple values into a single compound value. The values within a tuple can be of any type and donâ€™t have to be of the same type as each other
      static func basicsTuplesDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Basics.tuples.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Basics.tuples.description"
        }

        return NSLocalizedString("Basics.tuples.description", bundle: bundle, comment: "")
      }

      /// Value: Type Aliases
      static func basicsTypeAliasesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Basics.typeAliases.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Basics.typeAliases.title"
        }

        return NSLocalizedString("Basics.typeAliases.title", bundle: bundle, comment: "")
      }

      /// Value: Type a number: 
      static func arraysItemSampleType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Arrays.item.sample.type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Arrays.item.sample.type"
        }

        return NSLocalizedString("Arrays.item.sample.type", bundle: bundle, comment: "")
      }

      /// Value: Type aliases define an alternative name for an existing type. You define type aliases with the typealias keyword
      static func basicsTypeAliasesDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Basics.typeAliases.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Basics.typeAliases.description"
        }

        return NSLocalizedString("Basics.typeAliases.description", bundle: bundle, comment: "")
      }

      /// Value: Type aliases define an alternative name for an existing type. You define type aliases with the typealias keyword.
      static func typeAliasesItemTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("TypeAliases.item.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "TypeAliases.item.title"
        }

        return NSLocalizedString("TypeAliases.item.title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
